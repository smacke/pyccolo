# -*- coding: utf-8 -*-
import sys
import typing
from contextlib import contextmanager
from typing import TYPE_CHECKING, Callable, Generator

if TYPE_CHECKING:
    import ast

from pyccolo._fast import *  # noqa: F403

@contextmanager
def location_of(node: ast.AST) -> "Generator[None, None, None]": ...
def location_of_arg(func: Callable[..., ast.AST]) -> "Callable[..., ast.AST]": ...
def kw(arg: str, value: "ast.expr") -> "ast.keyword": ...
def kwargs(**kwargs: "ast.expr") -> "typing.List[ast.keyword]": ...
def parse(*args, **kwargs) -> "ast.Module": ...
def AnnAssign(*args, **kwargs) -> "ast.AnnAssign": ...
def Assert(*args, **kwargs) -> "ast.Assert": ...
def Assign(*args, **kwargs) -> "ast.Assign": ...
def AsyncFor(*args, **kwargs) -> "ast.AsyncFor": ...
def AsyncFunctionDef(*args, **kwargs) -> "ast.AsyncFunctionDef": ...
def AsyncWith(*args, **kwargs) -> "ast.AsyncWith": ...
def Attribute(*args, **kwargs) -> "ast.Attribute": ...
def AugAssign(*args, **kwargs) -> "ast.AugAssign": ...
def Await(*args, **kwargs) -> "ast.Await": ...
def BinOp(*args, **kwargs) -> "ast.BinOp": ...
def BoolOp(*args, **kwargs) -> "ast.BoolOp": ...
def Call(*args, **kwargs) -> "ast.Call": ...
def ClassDef(*args, **kwargs) -> "ast.ClassDef": ...
def Compare(*args, **kwargs) -> "ast.Compare": ...
def Delete(*args, **kwargs) -> "ast.Delete": ...
def Dict(*args, **kwargs) -> "ast.Dict": ...
def DictComp(*args, **kwargs) -> "ast.DictComp": ...
def ExceptHandler(*args, **kwargs) -> "ast.ExceptHandler": ...
def Expr(*args, **kwargs) -> "ast.Expr": ...
def For(*args, **kwargs) -> "ast.For": ...
def FormattedValue(*args, **kwargs) -> "ast.FormattedValue": ...
def FunctionDef(*args, **kwargs) -> "ast.FunctionDef": ...
def GeneratorExpr(*args, **kwargs) -> "ast.GeneratorExp": ...
def Global(*args, **kwargs) -> "ast.Global": ...
def If(*args, **kwargs) -> "ast.If": ...
def IfExp(*args, **kwargs) -> "ast.IfExp": ...
def Import(*args, **kwargs) -> "ast.Import": ...
def ImportFrom(*args, **kwargs) -> "ast.ImportFrom": ...
def JoinedStr(*args, **kwargs) -> "ast.JoinedStr": ...
def Lambda(*args, **kwargs) -> "ast.Lambda": ...
def List(*args, **kwargs) -> "ast.List": ...
def ListComp(*args, **kwargs) -> "ast.ListComp": ...
def Name(*args, **kwargs) -> "ast.Name": ...
def Nonlocal(*args, **kwargs) -> "ast.Nonlocal": ...
def Pass(*args, **kwargs) -> "ast.Pass": ...
def Raise(*args, **kwargs) -> "ast.Raise": ...
def Return(*args, **kwargs) -> "ast.Return": ...
def Set(*args, **kwargs) -> "ast.Set": ...
def SetComp(*args, **kwargs) -> "ast.SetComp": ...
def Slice(*args, **kwargs) -> "ast.Slice": ...
def Starred(*args, **kwargs) -> "ast.Starred": ...
def Subscript(*args, **kwargs) -> "ast.Subscript": ...
def Try(*args, **kwargs) -> "ast.Try": ...
def Tuple(*args, **kwargs) -> "ast.Tuple": ...
def UnaryOp(*args, **kwargs) -> "ast.UnaryOp": ...
def While(*args, **kwargs) -> "ast.While": ...
def With(*args, **kwargs) -> "ast.With": ...
def Yield(*args, **kwargs) -> "ast.Yield": ...
def YieldFrom(*args, **kwargs) -> "ast.YieldFrom": ...
def alias(*args, **kwargs) -> "ast.alias": ...
def arg(*args, **kwargs) -> "ast.arg": ...
def comprehension(*args, **kwargs) -> "ast.comprehension": ...
def excepthandler(*args, **kwargs) -> "ast.excepthandler": ...
def keyword(*args, **kwargs) -> "ast.keyword": ...
def withitem(*args, **kwargs) -> "ast.withitem": ...

if sys.version_info < (3, 9):
    def ExtSlice(*args, **kwargs) -> "ast.ExtSlice": ...
    def Index(*args, **kwargs) -> "ast.Index": ...

if sys.version_info < (3, 8):
    def Num(*args, **kwargs) -> "ast.Num": ...
    def Str(*args, **kwargs) -> "ast.Str": ...
    def Bytes(*args, **kwargs) -> "ast.Bytes": ...
    def NameConstant(*args, **kwargs) -> "ast.NameConstant": ...
    def Ellipsis(*args, **kwargs) -> "ast.Ellipsis": ...

else:
    def Constant(*args, **kwargs) -> "ast.Constant": ...
    def Num(*args, **kwargs) -> "ast.Constant": ...
    def Str(*args, **kwargs) -> "ast.Constant": ...
    def Bytes(*args, **kwargs) -> "ast.Constant": ...
    def NameConstant(*args, **kwargs) -> "ast.Constant": ...
    def Ellipsis(*args, **kwargs) -> "ast.Constant": ...

if sys.version_info >= (3, 10):
    def Match(*args, **kwargs) -> "ast.Match": ...
    def MatchAs(*args, **kwargs) -> "ast.MatchAs": ...
    def MatchClass(*args, **kwargs) -> "ast.MatchClass": ...
    def MatchMapping(*args, **kwargs) -> "ast.MatchMapping": ...
    def MatchOr(*args, **kwargs) -> "ast.MatchOr": ...
    def MatchSequence(*args, **kwargs) -> "ast.MatchSequence": ...
    def MatchSingleton(*args, **kwargs) -> "ast.MatchSingleton": ...
    def MatchStar(*args, **kwargs) -> "ast.MatchStar": ...
    def MatchValue(*args, **kwargs) -> "ast.MatchValue": ...

if sys.version_info >= (3, 11):
    def TryStar(*args, **kwargs) -> "ast.TryStar": ...
